{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red103\green103\blue103;\red103\green103\blue103;\red128\green128\blue128;
\red128\green128\blue128;\red77\green77\blue77;\red110\green5\blue0;\red77\green77\blue77;\red217\green11\blue0;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww20120\viewh13360\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc\partightenfactor0

\f0\fs28 \cf0 \ul \ulc0 Sortable API / Events & Data Structure
\fs24 \ulnone \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \
\
\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\b\fs28 \cf0 API \'85
\f1\b0\fs24 \
\
app.UI.sortable = \{\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6415\tx6803\pardirnatural\partightenfactor0
\cf0 	sort : [] \cf2 \'97 This contains objects that group sortable stacks together\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	\
	\cf2 ////////////////////////////////////////////////////////////\
	/////// Query and sorting / Identification of nodes ///////\
	//////////////////////////////////////////////////////////\
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6415\tx6803\pardirnatural\partightenfactor0
\cf0 	findNearest( arrayPath, selector ) \cf2 \'97 Used to find the nearest element to the relative element\cf0 \
	__nodeIndexUpdate( sortID ) \cf2 \'97 Invoked when a stacks structure is modified to update data attributes assigning\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
	\cf3 ///////////////////////////////////\
	/////// Add / remove nodes ///////\
	/////////////////////////////////\cf0 \
\
	add( sortID , templateName )\cf4  \'97 Invoked to add a new node template (defined by templateName) to a stack ( defined by stackID )\cf0 \
	remove( stackID, templateName ) \cf4 \'97 Invoked to remove a node template (defined by templateName) from a stack ( defined by stackID )\cf0 \
\
	\cf3 ////////////////////////////\
	/////// Other API\'92s ///////\
	//////////////////////////\
\cf0 \
	\cf2 // This constructor creates objects only for the stack (NOT MAPPED ARRAY the init constructors are for this, see data structure init)\cf0 \
	__stackConstruct( nodeType, element )\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \
\
\
\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1 \cf0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\b\fs28 \cf0 Events \'85
\f1\b0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \
\
\
\
\
\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1 \cf0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\b\fs28 \cf0 DATA STRUCTURE\'85
\f1\b0\fs24 \
\
\
app.UI.sortable.init (\{
\f0 \
\
	\
	
\f1 selector : '.threeStacks',
\f0 \
\
	
\f1 elements : [ DOMElement, DOMElement, DOMElement ],
\f0 \
\
	
\f1 templates : [\
		\cf5 // Default stack 0\cf0 \
		\{ group: DOMElement, node: DOMElement, embed: DOMElement \},\
		\cf5 // All other stack templates must parallel stack 0\cf0 \
		\{ group: DOMElement, node: DOMElement, embed: DOMElement \},\
		\{		true   	  ,  	   true	      ,     false        \}\
	],
\f0 \
\
	constructors :  \{ group: Func(), node: Func(), custom: Func() \},\
\
	
\f1 stackChange  :[ function()\{ ... \} , function()\{ ... \}, true  ],\
	nodeAdded    :[ function()\{ ... \} , function()\{ ... \}, true  ],\
	nodeSelect   :[ function()\{ ... \} , function()\{ ... \}, true  ],\
	nodeChange   :[ function()\{ ... \} , function()\{ ... \}, false ],\
	nodeDeleted  :[ function()\{ ... \} , function()\{ ... \}, false ],\
	groupSelect  :[ function()\{ ... \} , function()\{ ... \}, true  ],\
	groupDeleted :[ function()\{ ... \} , function()\{ ... \}, false ]\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \});\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\b\fs28 \cf0 CODE Explanation\'85
\f1\b0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf6 A sortable region can have multiple stacks, each stack within a sortable region will stay in sync.\
Initialising a new sortable region\'85\cf0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1 \cf0 app.UI.sortable.init (\{
\f0 \
\
	\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf3 	// Firstly choose whether you want to setup the sortable region by a CSS selector\'85\cf0 \
	
\f1 selector : '.threeStacks',
\f0 \
\
	\cf3 // OR target the DOM Elements in memory, even if only one DOM element is to be targeted it still must be in an array\'85\cf0 \
	
\f1 elements : [ DOMElement, DOMElement, DOMElement ],
\f0 \
\
	\cf3 // Templates -- you can have custom templates foreach stack or default templates (true) must be passed\
	** Principle of parallel data :\
	You can control what nodes can be created for that stack but you cannot have an entirely new template for that stack. For example 	the default ( stack 0 ) has
\b  group, node & mask templates 
\b0 and for the second stack is 
\b group, node, mask & \cf7 specialTemplate\cf3 .\
	
\b0 Stacks cannot have more templates than the default stack 0 templates keeping the data parallel.\
\cf0 \
	
\f1 templates : [\
		\cf5 // Default stack 0\cf0 \
		\{ group: DOMElement, node: DOMElement, embed: DOMElement \},\
		\cf5 // All other stack templates must parallel stack 0\cf0 \
		\{ group: DOMElement, node: DOMElement, embed: DOMElement \},\
		\{		true   	  ,  	   true	      ,     false        \}\
	],
\f0 \
\
	\cf3 // Constructors -- custom constructors foreach stack or default constructor true or false\
	** Principle of parallel data :\
	You can only have the same amount of constructors that are parallel to the default stack 0 templates, this ensures the mapped array 	only has the same set of data values produced by the constructor. To keep everything parallel stack 0 is the default amount of 	templates for all stacks, the constructors parallel the default stack 0 ensuring that every template no matter the stack creates  the 	same constant data in our mapped array.\
\cf0 \
	constructors :  \{ group: Func(), node: Func(), custom: Func() \},\
\
	\cf3 // Callbacks -- Custom callback for each stack OR true (DEFAULT) OR false (DO NOTHING)\cf0 \
\
	
\f1 stackChange  :[ function()\{ ... \} , function()\{ ... \}, true  ],\
	nodeSelect   :[ function()\{ ... \} , function()\{ ... \}, true  ],\
	nodeChange   :[ function()\{ ... \} , function()\{ ... \}, false ],\
	nodeDeleted  :[ function()\{ ... \} , function()\{ ... \}, false ],\
	groupSelect  :[ function()\{ ... \} , function()\{ ... \}, true  ],\
	groupDeleted :[ function()\{ ... \} , function()\{ ... \}, false ]\

\f0 \});\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\b\fs28 \cf0 Note: z-index goes the opposite way to JS arrays with the elements on top at the bottom of the stack AND MAPPED ARRAY\'85
\f0\b0\fs24 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Pasted Graphic 1.tiff \width8000 \height3580
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 This adheres to the 
\b parallel data principle
\b0  keeping the process in order. Interpretation of a document is programmable so it doesn\'92t matter if in memory 
\b 0:\{nodeElement\}
\b0  is at the top of the array in however visually the zIndex puts it at the bottom. 
\b Second principle\'85 \ul visual data must come first
\b0 \ulnone  as this is not flexible however memory is.\
\
\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\b\fs28 \cf0 Sortable stack - AFTER INIT\'85
\f1\b0\fs24 \
\
\cf2 // Each group of stacks to be synced together we create a new object within the sort array, all sortable stacks are found in the sort array.\cf0 \
app.UI.sortable.sort = [];\
\
\
\cf2 // For example I have initialised three elements to be joined together on the stack node.\cf0 \
app.UI.sortable.sort = [\
\
	\cf8 // Even though we have three elements they are grouped together within this object\cf0 \
	0:\{\
		'elements'    : [ DOMElem 
\f2\b 0
\f1\b0  , DOMElem 
\f2\b 1 , 
\f1\b0 DOMElem 
\f2\b 2
\f1\b0  ] \cf2 \'97 These are the main element stacks\cf0 \
		'stacks'      : [   stack 
\f2\b 0 ,  
\f1\b0 stack 
\f2\b 1  ,  
\f1\b0 stack 
\f2\b 2 
\f1\b0  ] \cf8 \'97 See a stack data structure\
\cf0 \
		\cf2 // Each stack has a template object, each object contains a templateName (key) and the value is either true or a custom template,\
		   if true then the default template is used\cf0 \
		'templates'   : 
\f2\b\fs28 [
\f1\b0\fs24    
\f2\b \{
\f1\b0  group : DOMElement    
\f2\b\fs28 ,
\f1\b0\fs24      
\f2\b \{
\f1\b0  group : true         
\f2\b\fs28 ,
\f1\b0\fs24      
\f2\b \{
\f1\b0  group : true      
\f2\b\fs28 ]
\f1\b0\fs24 \
							  node  : DOMElement            node  : DOMElement           node  : true\
							  custom: DOMElement  
\f2\b \}
\f1\b0          custom: true       
\f2\b \}
\f1\b0          custom: true 
\f2\b \}
\f1\b0 \
\
		\cf2 ** Parallel data principle - we only have one mapped array, so all possible templates have a constructor\cf0 \
		'constructors': \{\
			group :function(el) \{ 
\f2\b return \{ type:'group', element: el, zindex: null, \cf9 childNodes\cf0 : [] \}
\f1\b0 ; \}\
			node  :function(el) \{ 
\f2\b return \{ type:'node', element: el, zindex: null \}
\f1\b0 ; \} \
			mask  :function(el) \{ 
\f2\b return \{ type:'mask', element: el \}
\f1\b0 ; \}\
		\}\
\
		\cf3 // Targets the node location where to add a new node\cf0 \
		\'91addIndex\'92    : []\
		\cf3 // Contains selected node locations\cf0 \
		'selected'    : []\
		\
		'mapArray'    : app.UI.array \cf2 \'97 Pointer to array\cf0 \
		'indicator'   : DOMElement\cf2  \'97 This is the DOM element\cf0 \
\
		
\f0 \cf3 // Callbacks -- are copied in\cf0 \
		
\f1 stackChange  :[ function()\{ ... \} , function()\{ ... \}, true  ]\
		nodeSelect   :[ function()\{ ... \} , function()\{ ... \}, true  ]\
		nodeChange   :[ function()\{ ... \} , function()\{ ... \}, false ]\
		nodeDeleted  :[ function()\{ ... \} , function()\{ ... \}, false ]\
		groupSelect  :[ function()\{ ... \} , function()\{ ... \}, true  ]\
		groupDeleted :[ function()\{ ... \} , function()\{ ... \}, false ]\
	\}\
\
];\
\
}