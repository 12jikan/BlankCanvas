{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green68\blue254;\red103\green103\blue103;\red222\green239\blue83;
\red209\green235\blue43;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12140\viewh13320\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc\partightenfactor0

\f0\fs36 \cf0 Targeting API
\fs24 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf0 1.
\b0  This API is used specifically for targeting elements on the canvas by the 
\b div.target
\b0  element. When any element with the class of target is clicked it\'92ll grab the x and y position of the cursor and use the 
\b getElementFromPoint
\b0 ( ); function to find the element.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Target figure 1.0.png \width8560 \height6160
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\

\b Target div
\b0 \
This div element has the live click or touch event on it so we can select elements. It also has child elements which are the bounding boxes of the elements selected.\
\

\b Elements div
\b0 \
This element contains all the visual elements of our canvas.\
\

\b Canvas div
\b0 \
This element is here for presentation (background) but also it encapsulates the elements and target divs.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
If there is any element there we must do a transparency test\'85 ( YET TO BE DONE )\
\
- if( pixel data ) \{ check for transparent pixels ( 
\i 6x6 grid tolerance
\i0  ) and if all are transparent then select anything behind or else just select the original image \}\
- if( SVG data ) \{ try the targeting system again to see if any valid SVG element comes up e.g rect, circle\'85 \}\
\

\b 2. 
\b0 After we\'92ve targeted the correct element we then need to draw and SVG box based on the boundary of that element.\
\

\b 3.
\b0  Now we have the current selected element we also need to sort the 
\b global dragPointer
\b0  array out that holds all the selected elements so we can reference these elements throughout our program. Each selected element is represented by an object in the array defining some information about the element selected.\
\

\b dragPointer
\b0  = [\
	\{ 
\b element
\b0 :DOMElement,
\b  x_elm
\b0 :\cf2 INT\cf0 , 
\b y_elm
\b0 :\cf2 INT\cf0 , 
\b svgBox
\b0 : ( 
\b SVGElement
\b0  or 
\b true
\b0  if redraw is required) \}\
]\
\
So our drag pointer array is manipulated by the targeting API and also the layer API as well. However for the targeting API we must also understand how the selection was make\'85\
\

\b if
\b0 ( 
\b no altkey
\b0  ) \{ then remove all elements out of the dragPointer array \}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf0 dragPointer
\b0  = [\
	\cf3 \strike \strikec3 \{ element:DOMElement, x_elm:INT, y_elm:INT, svgBox: ( SVGElement or true if redraw is required) \}\
	\{ element:DOMElement, x_elm:INT, y_elm:INT, svgBox: ( SVGElement or true if redraw is required) \}\cf0 \strike0\striked0 \
	\cb4 \{ 
\b element
\b0 :DOMElement,
\b  x_elm
\b0 :\cf2 INT\cf0 , 
\b y_elm
\b0 :\cf2 INT\cf0 , 
\b svgBox
\b0 : ( 
\b SVGElement
\b0  or 
\b true
\b0  if redraw is required) \}\cb1 \
]\
\

\b if
\b0 (
\b  altkey === \'93command\'94 || \'93shift\'94
\b0  ) \{ we\'92ll add in another element into our array \}\
\

\b dragPointer
\b0  = [\
	\{ 
\b element
\b0 :DOMElement,
\b  x_elm
\b0 :\cf2 INT\cf0 , 
\b y_elm
\b0 :\cf2 INT\cf0 , 
\b svgBox
\b0 : ( 
\b SVGElement
\b0  or 
\b true
\b0  if redraw is required) \}\
	\{ 
\b element
\b0 :DOMElement,
\b  x_elm
\b0 :\cf2 INT\cf0 , 
\b y_elm
\b0 :\cf2 INT\cf0 , 
\b svgBox
\b0 : ( 
\b SVGElement
\b0  or 
\b true
\b0  if redraw is required) \}\
	\cb5 \{ 
\b element
\b0 :DOMElement,
\b  x_elm
\b0 :\cf2 INT\cf0 , 
\b y_elm
\b0 :\cf2 INT\cf0 , 
\b svgBox
\b0 : ( 
\b SVGElement
\b0  or 
\b true
\b0  if redraw is required) \}\cb1 \
]\
}